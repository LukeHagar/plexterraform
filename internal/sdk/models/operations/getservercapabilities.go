// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type Errors struct {
	Code    *float64 `json:"code,omitempty"`
	Message *string  `json:"message,omitempty"`
	Status  *float64 `json:"status,omitempty"`
}

func (o *Errors) GetCode() *float64 {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Errors) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *Errors) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

// GetServerCapabilitiesServerResponseBody - Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
type GetServerCapabilitiesServerResponseBody struct {
	Errors []Errors `json:"errors,omitempty"`
}

func (o *GetServerCapabilitiesServerResponseBody) GetErrors() []Errors {
	if o == nil {
		return nil
	}
	return o.Errors
}

type Directory struct {
	Count *float64 `json:"count,omitempty"`
	Key   *string  `json:"key,omitempty"`
	Title *string  `json:"title,omitempty"`
}

func (o *Directory) GetCount() *float64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *Directory) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Directory) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

type MediaContainer struct {
	Size                          *float64    `json:"size,omitempty"`
	AllowCameraUpload             *bool       `json:"allowCameraUpload,omitempty"`
	AllowChannelAccess            *bool       `json:"allowChannelAccess,omitempty"`
	AllowMediaDeletion            *bool       `json:"allowMediaDeletion,omitempty"`
	AllowSharing                  *bool       `json:"allowSharing,omitempty"`
	AllowSync                     *bool       `json:"allowSync,omitempty"`
	AllowTuners                   *bool       `json:"allowTuners,omitempty"`
	BackgroundProcessing          *bool       `json:"backgroundProcessing,omitempty"`
	Certificate                   *bool       `json:"certificate,omitempty"`
	CompanionProxy                *bool       `json:"companionProxy,omitempty"`
	CountryCode                   *string     `json:"countryCode,omitempty"`
	Diagnostics                   *string     `json:"diagnostics,omitempty"`
	EventStream                   *bool       `json:"eventStream,omitempty"`
	FriendlyName                  *string     `json:"friendlyName,omitempty"`
	HubSearch                     *bool       `json:"hubSearch,omitempty"`
	ItemClusters                  *bool       `json:"itemClusters,omitempty"`
	Livetv                        *float64    `json:"livetv,omitempty"`
	MachineIdentifier             *string     `json:"machineIdentifier,omitempty"`
	MediaProviders                *bool       `json:"mediaProviders,omitempty"`
	Multiuser                     *bool       `json:"multiuser,omitempty"`
	MusicAnalysis                 *float64    `json:"musicAnalysis,omitempty"`
	MyPlex                        *bool       `json:"myPlex,omitempty"`
	MyPlexMappingState            *string     `json:"myPlexMappingState,omitempty"`
	MyPlexSigninState             *string     `json:"myPlexSigninState,omitempty"`
	MyPlexSubscription            *bool       `json:"myPlexSubscription,omitempty"`
	MyPlexUsername                *string     `json:"myPlexUsername,omitempty"`
	OfflineTranscode              *float64    `json:"offlineTranscode,omitempty"`
	OwnerFeatures                 *string     `json:"ownerFeatures,omitempty"`
	PhotoAutoTag                  *bool       `json:"photoAutoTag,omitempty"`
	Platform                      *string     `json:"platform,omitempty"`
	PlatformVersion               *string     `json:"platformVersion,omitempty"`
	PluginHost                    *bool       `json:"pluginHost,omitempty"`
	PushNotifications             *bool       `json:"pushNotifications,omitempty"`
	ReadOnlyLibraries             *bool       `json:"readOnlyLibraries,omitempty"`
	StreamingBrainABRVersion      *float64    `json:"streamingBrainABRVersion,omitempty"`
	StreamingBrainVersion         *float64    `json:"streamingBrainVersion,omitempty"`
	Sync                          *bool       `json:"sync,omitempty"`
	TranscoderActiveVideoSessions *float64    `json:"transcoderActiveVideoSessions,omitempty"`
	TranscoderAudio               *bool       `json:"transcoderAudio,omitempty"`
	TranscoderLyrics              *bool       `json:"transcoderLyrics,omitempty"`
	TranscoderPhoto               *bool       `json:"transcoderPhoto,omitempty"`
	TranscoderSubtitles           *bool       `json:"transcoderSubtitles,omitempty"`
	TranscoderVideo               *bool       `json:"transcoderVideo,omitempty"`
	TranscoderVideoBitrates       *string     `json:"transcoderVideoBitrates,omitempty"`
	TranscoderVideoQualities      *string     `json:"transcoderVideoQualities,omitempty"`
	TranscoderVideoResolutions    *string     `json:"transcoderVideoResolutions,omitempty"`
	UpdatedAt                     *float64    `json:"updatedAt,omitempty"`
	Updater                       *bool       `json:"updater,omitempty"`
	Version                       *string     `json:"version,omitempty"`
	VoiceSearch                   *bool       `json:"voiceSearch,omitempty"`
	Directory                     []Directory `json:"Directory,omitempty"`
}

func (o *MediaContainer) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *MediaContainer) GetAllowCameraUpload() *bool {
	if o == nil {
		return nil
	}
	return o.AllowCameraUpload
}

func (o *MediaContainer) GetAllowChannelAccess() *bool {
	if o == nil {
		return nil
	}
	return o.AllowChannelAccess
}

func (o *MediaContainer) GetAllowMediaDeletion() *bool {
	if o == nil {
		return nil
	}
	return o.AllowMediaDeletion
}

func (o *MediaContainer) GetAllowSharing() *bool {
	if o == nil {
		return nil
	}
	return o.AllowSharing
}

func (o *MediaContainer) GetAllowSync() *bool {
	if o == nil {
		return nil
	}
	return o.AllowSync
}

func (o *MediaContainer) GetAllowTuners() *bool {
	if o == nil {
		return nil
	}
	return o.AllowTuners
}

func (o *MediaContainer) GetBackgroundProcessing() *bool {
	if o == nil {
		return nil
	}
	return o.BackgroundProcessing
}

func (o *MediaContainer) GetCertificate() *bool {
	if o == nil {
		return nil
	}
	return o.Certificate
}

func (o *MediaContainer) GetCompanionProxy() *bool {
	if o == nil {
		return nil
	}
	return o.CompanionProxy
}

func (o *MediaContainer) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *MediaContainer) GetDiagnostics() *string {
	if o == nil {
		return nil
	}
	return o.Diagnostics
}

func (o *MediaContainer) GetEventStream() *bool {
	if o == nil {
		return nil
	}
	return o.EventStream
}

func (o *MediaContainer) GetFriendlyName() *string {
	if o == nil {
		return nil
	}
	return o.FriendlyName
}

func (o *MediaContainer) GetHubSearch() *bool {
	if o == nil {
		return nil
	}
	return o.HubSearch
}

func (o *MediaContainer) GetItemClusters() *bool {
	if o == nil {
		return nil
	}
	return o.ItemClusters
}

func (o *MediaContainer) GetLivetv() *float64 {
	if o == nil {
		return nil
	}
	return o.Livetv
}

func (o *MediaContainer) GetMachineIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.MachineIdentifier
}

func (o *MediaContainer) GetMediaProviders() *bool {
	if o == nil {
		return nil
	}
	return o.MediaProviders
}

func (o *MediaContainer) GetMultiuser() *bool {
	if o == nil {
		return nil
	}
	return o.Multiuser
}

func (o *MediaContainer) GetMusicAnalysis() *float64 {
	if o == nil {
		return nil
	}
	return o.MusicAnalysis
}

func (o *MediaContainer) GetMyPlex() *bool {
	if o == nil {
		return nil
	}
	return o.MyPlex
}

func (o *MediaContainer) GetMyPlexMappingState() *string {
	if o == nil {
		return nil
	}
	return o.MyPlexMappingState
}

func (o *MediaContainer) GetMyPlexSigninState() *string {
	if o == nil {
		return nil
	}
	return o.MyPlexSigninState
}

func (o *MediaContainer) GetMyPlexSubscription() *bool {
	if o == nil {
		return nil
	}
	return o.MyPlexSubscription
}

func (o *MediaContainer) GetMyPlexUsername() *string {
	if o == nil {
		return nil
	}
	return o.MyPlexUsername
}

func (o *MediaContainer) GetOfflineTranscode() *float64 {
	if o == nil {
		return nil
	}
	return o.OfflineTranscode
}

func (o *MediaContainer) GetOwnerFeatures() *string {
	if o == nil {
		return nil
	}
	return o.OwnerFeatures
}

func (o *MediaContainer) GetPhotoAutoTag() *bool {
	if o == nil {
		return nil
	}
	return o.PhotoAutoTag
}

func (o *MediaContainer) GetPlatform() *string {
	if o == nil {
		return nil
	}
	return o.Platform
}

func (o *MediaContainer) GetPlatformVersion() *string {
	if o == nil {
		return nil
	}
	return o.PlatformVersion
}

func (o *MediaContainer) GetPluginHost() *bool {
	if o == nil {
		return nil
	}
	return o.PluginHost
}

func (o *MediaContainer) GetPushNotifications() *bool {
	if o == nil {
		return nil
	}
	return o.PushNotifications
}

func (o *MediaContainer) GetReadOnlyLibraries() *bool {
	if o == nil {
		return nil
	}
	return o.ReadOnlyLibraries
}

func (o *MediaContainer) GetStreamingBrainABRVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.StreamingBrainABRVersion
}

func (o *MediaContainer) GetStreamingBrainVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.StreamingBrainVersion
}

func (o *MediaContainer) GetSync() *bool {
	if o == nil {
		return nil
	}
	return o.Sync
}

func (o *MediaContainer) GetTranscoderActiveVideoSessions() *float64 {
	if o == nil {
		return nil
	}
	return o.TranscoderActiveVideoSessions
}

func (o *MediaContainer) GetTranscoderAudio() *bool {
	if o == nil {
		return nil
	}
	return o.TranscoderAudio
}

func (o *MediaContainer) GetTranscoderLyrics() *bool {
	if o == nil {
		return nil
	}
	return o.TranscoderLyrics
}

func (o *MediaContainer) GetTranscoderPhoto() *bool {
	if o == nil {
		return nil
	}
	return o.TranscoderPhoto
}

func (o *MediaContainer) GetTranscoderSubtitles() *bool {
	if o == nil {
		return nil
	}
	return o.TranscoderSubtitles
}

func (o *MediaContainer) GetTranscoderVideo() *bool {
	if o == nil {
		return nil
	}
	return o.TranscoderVideo
}

func (o *MediaContainer) GetTranscoderVideoBitrates() *string {
	if o == nil {
		return nil
	}
	return o.TranscoderVideoBitrates
}

func (o *MediaContainer) GetTranscoderVideoQualities() *string {
	if o == nil {
		return nil
	}
	return o.TranscoderVideoQualities
}

func (o *MediaContainer) GetTranscoderVideoResolutions() *string {
	if o == nil {
		return nil
	}
	return o.TranscoderVideoResolutions
}

func (o *MediaContainer) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *MediaContainer) GetUpdater() *bool {
	if o == nil {
		return nil
	}
	return o.Updater
}

func (o *MediaContainer) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *MediaContainer) GetVoiceSearch() *bool {
	if o == nil {
		return nil
	}
	return o.VoiceSearch
}

func (o *MediaContainer) GetDirectory() []Directory {
	if o == nil {
		return nil
	}
	return o.Directory
}

// GetServerCapabilitiesResponseBody - The Server Capabilities
type GetServerCapabilitiesResponseBody struct {
	MediaContainer *MediaContainer `json:"MediaContainer,omitempty"`
}

func (o *GetServerCapabilitiesResponseBody) GetMediaContainer() *MediaContainer {
	if o == nil {
		return nil
	}
	return o.MediaContainer
}

type GetServerCapabilitiesResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The Server Capabilities
	TwoHundredApplicationJSONObject *GetServerCapabilitiesResponseBody
	// Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
	FourHundredAndOneApplicationJSONObject *GetServerCapabilitiesServerResponseBody
}

func (o *GetServerCapabilitiesResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetServerCapabilitiesResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetServerCapabilitiesResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetServerCapabilitiesResponse) GetTwoHundredApplicationJSONObject() *GetServerCapabilitiesResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *GetServerCapabilitiesResponse) GetFourHundredAndOneApplicationJSONObject() *GetServerCapabilitiesServerResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOneApplicationJSONObject
}
