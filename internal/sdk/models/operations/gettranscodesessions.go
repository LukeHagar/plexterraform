// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetTranscodeSessionsErrors struct {
	Code    *float64 `json:"code,omitempty"`
	Message *string  `json:"message,omitempty"`
	Status  *float64 `json:"status,omitempty"`
}

func (o *GetTranscodeSessionsErrors) GetCode() *float64 {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *GetTranscodeSessionsErrors) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *GetTranscodeSessionsErrors) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

// GetTranscodeSessionsSessionsResponseBody - Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
type GetTranscodeSessionsSessionsResponseBody struct {
	Errors []GetTranscodeSessionsErrors `json:"errors,omitempty"`
}

func (o *GetTranscodeSessionsSessionsResponseBody) GetErrors() []GetTranscodeSessionsErrors {
	if o == nil {
		return nil
	}
	return o.Errors
}

type TranscodeSession struct {
	Key                  *string  `json:"key,omitempty"`
	Throttled            *bool    `json:"throttled,omitempty"`
	Complete             *bool    `json:"complete,omitempty"`
	Progress             *float64 `json:"progress,omitempty"`
	Size                 *int     `json:"size,omitempty"`
	Speed                *float64 `json:"speed,omitempty"`
	Error                *bool    `json:"error,omitempty"`
	Duration             *int     `json:"duration,omitempty"`
	Remaining            *int     `json:"remaining,omitempty"`
	Context              *string  `json:"context,omitempty"`
	SourceVideoCodec     *string  `json:"sourceVideoCodec,omitempty"`
	SourceAudioCodec     *string  `json:"sourceAudioCodec,omitempty"`
	VideoDecision        *string  `json:"videoDecision,omitempty"`
	AudioDecision        *string  `json:"audioDecision,omitempty"`
	SubtitleDecision     *string  `json:"subtitleDecision,omitempty"`
	Protocol             *string  `json:"protocol,omitempty"`
	Container            *string  `json:"container,omitempty"`
	VideoCodec           *string  `json:"videoCodec,omitempty"`
	AudioCodec           *string  `json:"audioCodec,omitempty"`
	AudioChannels        *int     `json:"audioChannels,omitempty"`
	TranscodeHwRequested *bool    `json:"transcodeHwRequested,omitempty"`
	TimeStamp            *float64 `json:"timeStamp,omitempty"`
	MaxOffsetAvailable   *float64 `json:"maxOffsetAvailable,omitempty"`
	MinOffsetAvailable   *float64 `json:"minOffsetAvailable,omitempty"`
}

func (o *TranscodeSession) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *TranscodeSession) GetThrottled() *bool {
	if o == nil {
		return nil
	}
	return o.Throttled
}

func (o *TranscodeSession) GetComplete() *bool {
	if o == nil {
		return nil
	}
	return o.Complete
}

func (o *TranscodeSession) GetProgress() *float64 {
	if o == nil {
		return nil
	}
	return o.Progress
}

func (o *TranscodeSession) GetSize() *int {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *TranscodeSession) GetSpeed() *float64 {
	if o == nil {
		return nil
	}
	return o.Speed
}

func (o *TranscodeSession) GetError() *bool {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *TranscodeSession) GetDuration() *int {
	if o == nil {
		return nil
	}
	return o.Duration
}

func (o *TranscodeSession) GetRemaining() *int {
	if o == nil {
		return nil
	}
	return o.Remaining
}

func (o *TranscodeSession) GetContext() *string {
	if o == nil {
		return nil
	}
	return o.Context
}

func (o *TranscodeSession) GetSourceVideoCodec() *string {
	if o == nil {
		return nil
	}
	return o.SourceVideoCodec
}

func (o *TranscodeSession) GetSourceAudioCodec() *string {
	if o == nil {
		return nil
	}
	return o.SourceAudioCodec
}

func (o *TranscodeSession) GetVideoDecision() *string {
	if o == nil {
		return nil
	}
	return o.VideoDecision
}

func (o *TranscodeSession) GetAudioDecision() *string {
	if o == nil {
		return nil
	}
	return o.AudioDecision
}

func (o *TranscodeSession) GetSubtitleDecision() *string {
	if o == nil {
		return nil
	}
	return o.SubtitleDecision
}

func (o *TranscodeSession) GetProtocol() *string {
	if o == nil {
		return nil
	}
	return o.Protocol
}

func (o *TranscodeSession) GetContainer() *string {
	if o == nil {
		return nil
	}
	return o.Container
}

func (o *TranscodeSession) GetVideoCodec() *string {
	if o == nil {
		return nil
	}
	return o.VideoCodec
}

func (o *TranscodeSession) GetAudioCodec() *string {
	if o == nil {
		return nil
	}
	return o.AudioCodec
}

func (o *TranscodeSession) GetAudioChannels() *int {
	if o == nil {
		return nil
	}
	return o.AudioChannels
}

func (o *TranscodeSession) GetTranscodeHwRequested() *bool {
	if o == nil {
		return nil
	}
	return o.TranscodeHwRequested
}

func (o *TranscodeSession) GetTimeStamp() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeStamp
}

func (o *TranscodeSession) GetMaxOffsetAvailable() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxOffsetAvailable
}

func (o *TranscodeSession) GetMinOffsetAvailable() *float64 {
	if o == nil {
		return nil
	}
	return o.MinOffsetAvailable
}

type GetTranscodeSessionsMediaContainer struct {
	Size             *int               `json:"size,omitempty"`
	TranscodeSession []TranscodeSession `json:"TranscodeSession,omitempty"`
}

func (o *GetTranscodeSessionsMediaContainer) GetSize() *int {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetTranscodeSessionsMediaContainer) GetTranscodeSession() []TranscodeSession {
	if o == nil {
		return nil
	}
	return o.TranscodeSession
}

// GetTranscodeSessionsResponseBody - The Transcode Sessions
type GetTranscodeSessionsResponseBody struct {
	MediaContainer *GetTranscodeSessionsMediaContainer `json:"MediaContainer,omitempty"`
}

func (o *GetTranscodeSessionsResponseBody) GetMediaContainer() *GetTranscodeSessionsMediaContainer {
	if o == nil {
		return nil
	}
	return o.MediaContainer
}

type GetTranscodeSessionsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// The Transcode Sessions
	TwoHundredApplicationJSONObject *GetTranscodeSessionsResponseBody
	// Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
	FourHundredAndOneApplicationJSONObject *GetTranscodeSessionsSessionsResponseBody
}

func (o *GetTranscodeSessionsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetTranscodeSessionsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetTranscodeSessionsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetTranscodeSessionsResponse) GetTwoHundredApplicationJSONObject() *GetTranscodeSessionsResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *GetTranscodeSessionsResponse) GetFourHundredAndOneApplicationJSONObject() *GetTranscodeSessionsSessionsResponseBody {
	if o == nil {
		return nil
	}
	return o.FourHundredAndOneApplicationJSONObject
}
