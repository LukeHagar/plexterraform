// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type StartUniversalTranscodeRequest struct {
	// Whether the media item has MDE
	HasMDE float64 `queryParam:"style=form,explode=true,name=hasMDE"`
	// The path to the media item to transcode
	Path string `queryParam:"style=form,explode=true,name=path"`
	// The index of the media item to transcode
	MediaIndex float64 `queryParam:"style=form,explode=true,name=mediaIndex"`
	// The index of the part to transcode
	PartIndex float64 `queryParam:"style=form,explode=true,name=partIndex"`
	// The protocol to use for the transcode session
	Protocol string `queryParam:"style=form,explode=true,name=protocol"`
	// Whether to use fast seek or not
	FastSeek *float64 `queryParam:"style=form,explode=true,name=fastSeek"`
	// Whether to use direct play or not
	DirectPlay *float64 `queryParam:"style=form,explode=true,name=directPlay"`
	// Whether to use direct stream or not
	DirectStream *float64 `queryParam:"style=form,explode=true,name=directStream"`
	// The size of the subtitles
	SubtitleSize *float64 `queryParam:"style=form,explode=true,name=subtitleSize"`
	// The subtitles
	Subtites *string `queryParam:"style=form,explode=true,name=subtites"`
	// The audio boost
	AudioBoost *float64 `queryParam:"style=form,explode=true,name=audioBoost"`
	// The location of the transcode session
	Location *string `queryParam:"style=form,explode=true,name=location"`
	// The size of the media buffer
	MediaBufferSize *float64 `queryParam:"style=form,explode=true,name=mediaBufferSize"`
	// The session ID
	Session *string `queryParam:"style=form,explode=true,name=session"`
	// Whether to add a debug overlay or not
	AddDebugOverlay *float64 `queryParam:"style=form,explode=true,name=addDebugOverlay"`
	// Whether to auto adjust quality or not
	AutoAdjustQuality *float64 `queryParam:"style=form,explode=true,name=autoAdjustQuality"`
}

func (o *StartUniversalTranscodeRequest) GetHasMDE() float64 {
	if o == nil {
		return 0.0
	}
	return o.HasMDE
}

func (o *StartUniversalTranscodeRequest) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *StartUniversalTranscodeRequest) GetMediaIndex() float64 {
	if o == nil {
		return 0.0
	}
	return o.MediaIndex
}

func (o *StartUniversalTranscodeRequest) GetPartIndex() float64 {
	if o == nil {
		return 0.0
	}
	return o.PartIndex
}

func (o *StartUniversalTranscodeRequest) GetProtocol() string {
	if o == nil {
		return ""
	}
	return o.Protocol
}

func (o *StartUniversalTranscodeRequest) GetFastSeek() *float64 {
	if o == nil {
		return nil
	}
	return o.FastSeek
}

func (o *StartUniversalTranscodeRequest) GetDirectPlay() *float64 {
	if o == nil {
		return nil
	}
	return o.DirectPlay
}

func (o *StartUniversalTranscodeRequest) GetDirectStream() *float64 {
	if o == nil {
		return nil
	}
	return o.DirectStream
}

func (o *StartUniversalTranscodeRequest) GetSubtitleSize() *float64 {
	if o == nil {
		return nil
	}
	return o.SubtitleSize
}

func (o *StartUniversalTranscodeRequest) GetSubtites() *string {
	if o == nil {
		return nil
	}
	return o.Subtites
}

func (o *StartUniversalTranscodeRequest) GetAudioBoost() *float64 {
	if o == nil {
		return nil
	}
	return o.AudioBoost
}

func (o *StartUniversalTranscodeRequest) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *StartUniversalTranscodeRequest) GetMediaBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MediaBufferSize
}

func (o *StartUniversalTranscodeRequest) GetSession() *string {
	if o == nil {
		return nil
	}
	return o.Session
}

func (o *StartUniversalTranscodeRequest) GetAddDebugOverlay() *float64 {
	if o == nil {
		return nil
	}
	return o.AddDebugOverlay
}

func (o *StartUniversalTranscodeRequest) GetAutoAdjustQuality() *float64 {
	if o == nil {
		return nil
	}
	return o.AutoAdjustQuality
}

type StartUniversalTranscodeErrors struct {
	Code    *float64 `json:"code,omitempty"`
	Message *string  `json:"message,omitempty"`
	Status  *float64 `json:"status,omitempty"`
}

func (o *StartUniversalTranscodeErrors) GetCode() *float64 {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *StartUniversalTranscodeErrors) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *StartUniversalTranscodeErrors) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

// StartUniversalTranscodeResponseBody - Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
type StartUniversalTranscodeResponseBody struct {
	Errors []StartUniversalTranscodeErrors `json:"errors,omitempty"`
}

func (o *StartUniversalTranscodeResponseBody) GetErrors() []StartUniversalTranscodeErrors {
	if o == nil {
		return nil
	}
	return o.Errors
}

type StartUniversalTranscodeResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Unauthorized - Returned if the X-Plex-Token is missing from the header or query.
	Object *StartUniversalTranscodeResponseBody
}

func (o *StartUniversalTranscodeResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *StartUniversalTranscodeResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *StartUniversalTranscodeResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *StartUniversalTranscodeResponse) GetObject() *StartUniversalTranscodeResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
